openapi: 3.0.0

info:
  title: ""
  version: "%%%VERSION%%%"

paths:
  /list/routes:
    get:
      summary: Lists all available endpoints

      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                - "[GET] /list/routes"
        "500":
          description: Server Error

  /system/config:
    get:
      summary: get system config
      description: "returns publicly available parts of system config
        - version number
        - customTexts for UI"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  customTexts:
                    type: object
                required:
                  - version
                  - customTexts
              example:
                version: "%%%VERSION%%%"
                customTexts: {}
        "500":
          description: Server Error

  /version:
    get:
      summary: get API version
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                version: "%%%VERSION%%%"

  /workspaces:
    get:
      summary: get a list of workspaces
      description: get a list of all workspaces

      parameters:
        - in: header
          name: AuthToken
          description: auth-token for admin-user with super-admin privilege
          example: "a:user000000000.superadmin0"

      responses:
        "200":
          description: List of Workspaces
          content:
            application/json:
              schema:
                $ref: './@components.spec.yml#/components/schemas/workspace_list'
              example:
                - id: '1'
                  name: "example_workspace"
        "401":
          description: Not authenticated
        "410":
          description: Session Expired
        "403":
          description: Forbidden
        "500":
          description: Server Error

    delete:
      summary: delete some workspaces
      description: deletes a list of workspaces given by their ids

      parameters:
        - in: header
          name: AuthToken
          description: auth-token for admin-user with super-admin privilege
          example: "a:user000000000.superadmin0"

      requestBody:
        content:
          application/json:
            schema:
              properties:
                ws:
                  type: array
                  description: list of Workspace-Id
                  items:
                    type: integer
              required:
                - ws
            example:
              ws: [2]

      responses:
        "401":
          description: Not authenticated
        "410":
          description: Session Expired
        "403":
          description: Forbidden
        "500":
          description: Server Error

  /users:
    get:
      summary: get a list of users
      description: returns info about all registered users.

      parameters:
        - in: header
          name: AuthToken
          description: auth-token for admin-user with super-admin privilege
          example: "a:user000000000.superadmin0"

      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: './@components.spec.yml#/components/schemas/user_list'
              example:
                - name: super
                  id: '1'
                  email: null
                  isSuperadmin: true
        "401":
          description: Not authenticated
        "410":
          description: Session Expired
        "403":
          description: Forbidden
        "500":
          description: Server Error

    delete:
      summary: delete some users
      description: deletes a list of given user-ids. ids wich did not exist get skipped; in other words there is no
        check if the user existed beforeheand.

      parameters:
        - in: header
          name: AuthToken
          description: auth-token for admin-user with super-admin privilege
          example: "a:user000000000.superadmin0"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                u:
                  type: array
                  items:
                    type: string
                    description: user-id
            example:
              u:
                - 2

      responses:
        "200":
          description: ok
        "401":
          description: Not authenticated
        "410":
          description: Session Expired
        "403":
          description: Forbidden
        "500":
          description: Server Error

  /sys-checks:
    get:
      summary: get a list of SysChecks
      description: get a list of available SysChecks (from all workspaces)

      responses:
        "200":
          description: list of SysChecks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    workspaceId:
                      type: integer
                    name:
                      type: string
                    label:
                      type: string
                    description:
                      type: string
              example:
                - workspaceId: 1
                  name: "SYSCHECK.SAMPLE"
                  label: "An example SysCheck definition"
                  description: "An example SysCheck definition with long description"
        "204": # TODO check return code on empty folder
          description: No SysChecks found.
        "500":
          description: Server Error
